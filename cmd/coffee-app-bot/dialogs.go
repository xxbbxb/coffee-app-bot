package main

import (
	"context"
	"fmt"
	"strings"

	"github.com/xxbbxb/coffee-app-bot/pkg/router"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	csOnlineReady    = "üü¢–ú–æ–≥—É —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω"
	csOnlineNotReady = "‚ö´–¢–æ–ª—å–∫–æ –æ—Ñ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏"
)

func DialogEditName(bot *tgbotapi.BotAPI, chatId int64, back string) int {
	return SendMessage(bot, chatId, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ)",
		WithKeyboard(
			MenuVertical(tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", back)),
		),
	)
}

func DialogEditBio(bot *tgbotapi.BotAPI, chatId int64, back string) {
	SendMessage(bot, chatId, "–ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ - —Ä–∞–±–æ—Ç–∞, —É–≤–ª–µ—á–µ–Ω–∏—è, –Ω–∞–≤—ã–∫–∏, –∏–Ω—Ç–µ—Ä–µ—Å—ã... (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)",
		WithKeyboard(
			MenuVertical(tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", back)),
		),
	)
}

func DialogSettings(bot *tgbotapi.BotAPI, u *router.Update) int {
	settings := GetSettings(u.Context())
	var t []string
	var onlineButtonText string
	t = append(t, "–ö–∞–∫ –∏ –≥–¥–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø–∏—Ç—å –∫–æ—Ñ–µ —Å —Å–æ–æ–±—â–Ω–∏–∫–∞–º–∏:\n")

	t = append(t, fmt.Sprintf("–í–∏–¥–∏–º–æ—Å—Ç—å –≤ –ø–æ–∏—Å–∫–µ: <b>%d %%</b>", settings.Visibility))

	if settings.OnLineReady {
		t = append(t, fmt.Sprintf("–û–Ω–ª–∞–π–Ω: <b>%s</b>", csOnlineReady))
		onlineButtonText = csOnlineNotReady
	} else {
		t = append(t, fmt.Sprintf("–û–Ω–ª–∞–π–Ω: <b>%s</b>", csOnlineNotReady))
		onlineButtonText = csOnlineReady
	}

	if settings.OfflineCity == "" {
		settings.OfflineCity = "---"
	}
	t = append(t, fmt.Sprintf("–ì–æ—Ä–æ–¥(–∞) –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á: <b>%s</b>", settings.OfflineCity))

	return SendMessage(bot, u.ChatID(), strings.Join(t, "\n"),
		WithKeyboard(
			MenuVertical(
				tgbotapi.NewInlineKeyboardButtonData("üìù–í–∏–¥–∏–º–æ—Å—Ç—å", "/settings/visibility"),
				tgbotapi.NewInlineKeyboardButtonData(onlineButtonText, fmt.Sprintf("/settings/online/%t", !settings.OnLineReady)),
				tgbotapi.NewInlineKeyboardButtonData("üåç–£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥", "/settings/city/edit"),
				tgbotapi.NewInlineKeyboardButtonURL("üí¨–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "https://forms.gle/SjKjrCKaPK1tMaHD9"),
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", "/start"),
			),
		),
		WithReplaceMessage(u),
	)
}

func DialogVisibility(bot *tgbotapi.BotAPI, chatId int64, u *router.Update) int {
	t := []string{
		"0% - –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –≤–∏–¥–Ω—ã –≤ –ø–æ–∏—Å–∫–µ",
		"1% - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ –≤ 100 —Ä–∞–∑ —Ä–µ–∂–µ —á–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏",
		"50% - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ 2 —Ä–∞–∑–∞ —Ä–µ–∂–µ",
		"100% (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —É –≤—Å–µ—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —à–∞–Ω—Å—ã",
		"200% - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ 2 —Ä–∞–∑–∞ —á–∞—â–µ",
	}

	return SendMessage(bot, chatId, strings.Join(t, "\n"),
		WithKeyboard(
			MenuHorizontal(
				tgbotapi.NewInlineKeyboardButtonData("0%", "/settings/visibility/0"),
				tgbotapi.NewInlineKeyboardButtonData("1%", "/settings/visibility/1"),
				tgbotapi.NewInlineKeyboardButtonData("50%", "/settings/visibility/50"),
				tgbotapi.NewInlineKeyboardButtonData("100%", "/settings/visibility/100"),
				tgbotapi.NewInlineKeyboardButtonData("200%", "/settings/visibility/200"),
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", "/settings/show"),
			),
		),
		WithReplaceMessage(u),
	)
}

func DialogRandomProfile(bot *tgbotapi.BotAPI, ctx context.Context, chatId int64) int {
	user := GetRandomUser(ctx)
	if user != nil {
		kb := MenuVertical(
			tgbotapi.NewInlineKeyboardButtonData("‚òï–ü–æ–∑–≤–∞—Ç—å –Ω–∞ –∫–æ—Ñ–µ", fmt.Sprintf("/match/invite/%d", user.Id)),
			tgbotapi.NewInlineKeyboardButtonData("üé≤–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", fmt.Sprintf("/match/deinvite/%d", user.Id)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå–ó–∞–±–∞–Ω–∏—Ç—å", fmt.Sprintf("/match/reject/%d", user.Id)),
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è–í –º–µ–Ω—é", "/start"),
		)
		return DialogProfile(bot, ctx, chatId, user, kb)
	}

	return SendMessage(bot, chatId, "üèÅ–í—ã –≤–∏–¥–µ–ª–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–Ω–∏–∫–æ–≤ –∏ –ª–∏–±–æ –∑–∞–±–∞–Ω–∏–ª–∏. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–¥–Ω–µ–µ –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ª—é–¥–∏.",
		WithKeyboard(
			MenuVertical(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è–í –º–µ–Ω—é", "/start"),
			),
		),
	)
}

func DialogProfile(bot *tgbotapi.BotAPI, ctx context.Context, chatId int64, user *User, kb tgbotapi.InlineKeyboardMarkup, extraText ...string) int {

	if user == nil {
		dbUser, err := GetDB(ctx).GetUser(chatId)
		if err != nil {
			log.WithError(err).Error("show profile dialog error")
		}
		user = &dbUser
	}
	if user.PhotoFileId != "" {
		return SendMessage(bot, chatId, RenderProfileText(ctx, *user, extraText...),
			WithKeyboard(kb),
			WithPhoto(user.PhotoFileId),
		)
	}
	return SendMessage(bot, chatId, RenderProfileText(ctx, *user, extraText...),
		WithKeyboard(kb),
	)
}

func RenderProfileText(ctx context.Context, user User, extraText ...string) string {
	text := []string{}

	text = append(text, fmt.Sprintf("<b>%s</b>", user.ShownName))
	if user.Bio != "" {
		text = append(text, user.Bio)
	}

	var availability string
	settings, err := GetDB(ctx).GetSettings(user.Id)
	if err != nil {
		log.WithError(err).WithField("user-id", user.Id).Warn("unable to read user settings")
	}
	if settings != nil {
		if settings.OnLineReady {
			availability = csOnlineReady
		}
		if availability != "" && settings.OfflineCity != "" {
			availability = fmt.Sprintf("%s –∏–ª–∏ ", availability)
		}
		if settings.OfflineCity != "" {
			availability = fmt.Sprintf("%s–æ—Ñ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏: %s", availability, settings.OfflineCity)
		}
		text = append(text, fmt.Sprintf("\n---\n<i>%s</i>", availability))
	}

	return strings.Join(text, "\n")
}
